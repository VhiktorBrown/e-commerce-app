
name: Build APK

on:
  # Triggers the workflow on every pull request and push to master branch
  push:
  pull_request:
    branches:
      - master

#  # Allows us to run this workflow manually from the Actions tab
#  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 15.x, 16.x ]

    steps:

        # Workflows program on Github currently gives an error stating that Node.js on it's Ubuntu system
        # is deprecated. So I have specified in this Workflow to use any of the NodeJS versions I have provided.
      
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        - run: npm ci
        - run: npm run build --if-present
        - run: npm test

      - name: Checkout the code
        uses: actions/checkout@v2

      # Fetching dependencies that Android uses to run build takes up a lot of time. This block here helps us cache most of these gradle dependencies
      - uses: actions/checkout@v2
        with:
          path: |
            ~/ .gradle/caches
            ~/ .gradle/wrapper
            key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      # We specify our Java Development environment version here
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # This is where we call the gradle command that builds the app
      - name: Build App
        run: ./gradlew assembleDebug

      # Here, after build is successful, we save the APK file to the path specified in 'path'
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: debug apk
          path: app/build/outputs/apk/debug/app-debug.apk